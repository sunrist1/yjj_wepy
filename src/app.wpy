<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}

</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

import config from './config'

var qcloud = require('./utils/wafer2-client-sdk/index')

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'packageA/pages/pubbuy',
      'packageA/pages/buy_agreement',
      'pages/pubdetail',
      'packageA/pages/account',
      'pages/prvdetail',
      'pages/hqb',
      'pages/planners',
      'pages/plannerDetail',
      'pages/infpage',
      'pages/prvlist',
      'pages/ratiopage',
      'pages/search',
      'pages/publist',
      'pages/recommend',
      'pages/webpage',
      'pages/pdfpage',
      'pages/yjjDownPage'
    ],
    tabBar: {
      selectedColor: '#fe602b',
      color: '#515151',
      list: [{
        pagePath: 'pages/index',
        text: '首页',
        iconPath: 'images/homepage.png',
        selectedIconPath: 'images/homepage_fill.png'
      }, {
        pagePath: 'pages/publist',
        text: '基金',
        iconPath: 'images/dynamic.png',
        selectedIconPath: 'images/dynamic_fill.png'
      }, {
        pagePath: 'packageA/pages/account',
        text: '个人',
        iconPath: 'images/people.png',
        selectedIconPath: 'images/people_fill.png'
      }, {
        pagePath: 'pages/infpage',
        text: '资讯',
        iconPath: 'images/message.png',
        selectedIconPath: 'images/message_fill.png'
      }]
    },
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')

    this.intercept('request', {
        // 发出请求时的回调函数
      config (p) {
        p.timestamp = +new Date()
        console.log('config request: ', p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        wepy.showToast({
          title: 'loading',
          icon: 'loading',
          duration: 3000
        })
        return p
      },

      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('request success: ', p)
        return p
      },

      fail (p) {
        console.log('request fail: ', p)
        return p
      },

      complete (p) {
        wepy.hideToast()
        console.log('request complete: ', p)
      }
    })
  }

  onLaunch() {
    // this.testAsync()
    // let that = this
    console.log(config.service.loginUrl)
    qcloud.setLoginUrl(config.service.loginUrl)
  }
  // sleep (s) {
  //   return new Promise((resolve, reject) => {
  //     setTimeout(() => {
  //       resolve('promise resolved')
  //     }, s * 1000)
  //   })
  // }

  // async testAsync () {
  //   const data = await this.sleep(3)
  //   console.log(data)
  // }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
